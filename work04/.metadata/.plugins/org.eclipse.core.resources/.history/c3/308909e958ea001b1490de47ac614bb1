package com.employee.controller;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.restapi.employee.Employee;
import com.restapi.employee.EmployeeDAO;
import com.restapi.employee.EmployeeDAOImpl;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;



@Path("empcontroller")
public class EmpController {
	
	@GET
	@Path("/hello")
	@Produces(MediaType.TEXT_PLAIN)
	public String getHello() {
		return "Hello From Controller";
	}
	
	@GET
	@Path("/employee") 
	@Produces(MediaType.APPLICATION_JSON)
	public String getAllEmployees() {
		ObjectMapper mapper = new ObjectMapper();
		EmployeeDAO empDao= new EmployeeDAOImpl();
		List<Employee> emplist01=empDao.getAllEmployees();
		try {
			return mapper.writeValueAsString(emplist01);
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			return e.getMessage();
		}
		
	}
	
	
	
	
	
	
	@GET
	@Path("/employee/{id}") 
	@Produces(MediaType.APPLICATION_JSON)
	public String getPerson(@PathParam("id") int num) {
		ObjectMapper mapper = new ObjectMapper();
		EmployeeDAO empDao= new EmployeeDAOImpl();
		Employee e1=empDao.getEmployee(num);
		try {
			return mapper.writeValueAsString(e1);
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			return e.getMessage();
		}
	}
	
	@POST
	@Path("/employee")
	@Consumes(MediaType.APPLICATION_JSON)
	
	public Response addPerson(String request) {
		Employee emp =null;
		String result=null;
		EmployeeDAO empDao= new EmployeeDAOImpl();
		try {
			emp=new ObjectMapper().readValue(request, Employee.class);
			System.out.println(emp);
			result=empDao.addEmployee(emp);
			
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return Response.status(200).entity(result).build();
	}
	

}
